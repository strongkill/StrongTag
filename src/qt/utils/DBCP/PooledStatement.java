// Decompiled by Jad v1.5.7g. Copyright 2000 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html
// Decompiler options: packimports(3) fieldsfirst ansi
// Source File Name:   PooledStatement.java

package qt.utils.DBCP;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

// Referenced classes of package net.snapbug.util.dbtool:
//            PooledResultSet, PooledConnection

public class PooledStatement
    implements Statement, PreparedStatement, CallableStatement
{

    public static void booked()
    {
    }
    private String FStr;
    private Statement FStmt;
    private PooledConnection FConn;
    private long FCreateTime;
    private long FLastActionTime;
    private long FidleTimeout;
    private String FreferedObjectName;
    private String FreferedObjectClass;

    private int FiPos;

    public PooledStatement(int AiPos, String AStr, PooledConnection AConn, Statement AStmt, long AidleTimeout)
    {
        this.FStmt = null;
        FCreateTime = System.currentTimeMillis();
        FLastActionTime = System.currentTimeMillis();
        this.FidleTimeout = 60L;
        FreferedObjectName = "";
        FreferedObjectClass = "";
        this.FConn = AConn;
        this.FStr = AStr;
        this.FStmt = AStmt;
        this.FidleTimeout = AidleTimeout;
        this.FiPos = AiPos;
        active();
    }

    public void active()
    {
        FConn.active();
        FLastActionTime = System.currentTimeMillis();
        FreferedObjectName = "";
        FreferedObjectClass = "";
    }

    public void addBatch()
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).addBatch();
    }

    public void addBatch(String AStr)
        throws SQLException
    {
        active();
        FStmt.addBatch(AStr);
    }

    public void cancel()
        throws SQLException
    {
        active();
        FStmt.cancel();
    }

    public void clearBatch()
        throws SQLException
    {
        active();
        FStmt.clearBatch();
    }

    public void clearParameters()
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).clearParameters();
    }

    public void clearWarnings()
        throws SQLException
    {
        active();
        FStmt.clearWarnings();
    }

    public void close()
        throws SQLException
    {
        if(FStmt != null)
        {
            /*try
            {
                FStmt.close();

            }
            catch(SQLException et)
            {
                FStmt = null;
                throw et;
            }*/
            FStmt = null;
        }
    }

    public boolean execute()
        throws SQLException
    {
        active();
        return ((PreparedStatement)FStmt).execute();
    }

    public boolean execute(String sSql)
        throws SQLException
    {
        active();
        return FStmt.execute(sSql);
    }

    public boolean execute(String sql,
                       int autoGeneratedKeys)
                throws SQLException
    {
        active();
        return FStmt.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql,
                       int[] columnIndexes)
                throws SQLException
    {
        active();
        return FStmt.execute(sql, columnIndexes);
    }

    public boolean execute(String sql,
                       String[] columnNames)
                 throws SQLException
    {
        active();
        return FStmt.execute(sql, columnNames);
    }

    public int[] executeBatch()
        throws SQLException
    {
        active();
        return FStmt.executeBatch();
    }

    public ResultSet executeQuery()
        throws SQLException
    {
        active();
        return ((PreparedStatement)FStmt).executeQuery();
    }

    public ResultSet executeQuery(String sSql)
        throws SQLException
    {
        active();
        return new PooledResultSet(this, FStmt.executeQuery(sSql));
    }

    public int executeUpdate()
        throws SQLException
    {
        active();
        return ((PreparedStatement)FStmt).executeUpdate();
    }

    public int executeUpdate(String sSql)
        throws SQLException
    {
        active();
        return FStmt.executeUpdate(sSql);
    }

    public int executeUpdate(String sql,
                         int autoGeneratedKeys)
                  throws SQLException
    {
        active();
        return FStmt.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql,
                         int[] columnIndexes)
                  throws SQLException
    {
        active();
        return FStmt.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql,
                         String[] columnNames)
                  throws SQLException
    {
        active();
        return FStmt.executeUpdate(sql, columnNames);
    }

    public Array getArray(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getArray(Aint);
    }

    public Array getArray(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getArray(parameterName);
    }

    public BigDecimal getBigDecimal(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBigDecimal(Aint);
    }

    public BigDecimal getBigDecimal(int Aint1, int Aint2)
        throws SQLException
    {
        active();
        return null;
    }

    public BigDecimal getBigDecimal(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBigDecimal(parameterName);
    }

    public Blob getBlob(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBlob(Aint);
    }

    public Blob getBlob(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBlob(parameterName);
    }

    public boolean getBoolean(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBoolean(Aint);
    }

    public boolean getBoolean(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBoolean(parameterName);
    }

    public byte getByte(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getByte(Aint);
    }

    public byte getByte(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getByte(parameterName);
    }

    public byte[] getBytes(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBytes(Aint);
    }

    public byte[] getBytes(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getBytes(parameterName);
    }

    public Reader getCharacterStream(int parameterIndex) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public Reader getCharacterStream(String parameterName) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public Clob getClob(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getClob(Aint);
    }

    public Clob getClob(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getClob(parameterName);
    }

    public Connection getConnection()
        throws SQLException
    {
        active();
        return FStmt.getConnection();
    }

    public java.sql.Date getDate(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getDate(Aint);
    }

    public java.sql.Date getDate(int Aint1, Calendar ACalendar)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getDate(Aint1, ACalendar);
    }

    public java.sql.Date getDate(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getDate(parameterName);
    }

    public java.sql.Date getDate(String parameterName, Calendar cal)
        throws SQLException
    {
        active();
        return ((CallableStatement) FStmt).getDate(parameterName, cal);
    }

    public double getDouble(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getDouble(Aint);
    }

    public double getDouble(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getDouble(parameterName);
    }

    public int getFetchDirection()
        throws SQLException
    {
        active();
        return FStmt.getFetchDirection();
    }

    public int getFetchSize()
        throws SQLException
    {
        active();
        return FStmt.getFetchSize();
    }

    public float getFloat(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getFloat(Aint);
    }

    public float getFloat(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getFloat(parameterName);
    }

    public ResultSet getGeneratedKeys()
                           throws SQLException
    {
        active();
        return new PooledResultSet(this, FStmt.getGeneratedKeys());
    }

    public int getInt(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getInt(Aint);
    }

    public int getInt(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getInt(parameterName);
    }

    public long getLong(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getLong(Aint);
    }

    public long getLong(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getLong(parameterName);
    }

    public int getMaxFieldSize()
        throws SQLException
    {
        active();
        return FStmt.getMaxFieldSize();
    }

    public int getMaxRows()
        throws SQLException
    {
        active();
        return FStmt.getMaxRows();
    }

    public ResultSetMetaData getMetaData()
        throws SQLException
    {
        active();
        return ((PreparedStatement)FStmt).getMetaData();
    }

    public boolean getMoreResults()
        throws SQLException
    {
        active();
        return FStmt.getMoreResults();
    }

    public boolean getMoreResults(int current)
                       throws SQLException
    {
        active();
        return FStmt.getMoreResults(current);
    }

    public Reader getNCharacterStream(int parameterIndex) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public Reader getNCharacterStream(String parameterName) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public String getNString(int parameterIndex) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public String getNString(String parameterName) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public Object getObject(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getObject(Aint);
    }
/*
    public Object getObject(int Aint, Map AMap)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getObject(Aint, AMap);
    }
*/
    public Object getObject(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getObject(parameterName);
    }

    public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

    public ParameterMetaData getParameterMetaData()
                                       throws SQLException
    {
        active();
        return ((PreparedStatement)FStmt).getParameterMetaData();
    }

    public int getQueryTimeout()
        throws SQLException
    {
        active();
        return FStmt.getQueryTimeout();
    }

    public Ref getRef(int Aint)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getRef(Aint);
    }

    public Ref getRef(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).getRef(parameterName);
    }

    public ResultSet getResultSet()
        throws SQLException
    {
        active();
        return new PooledResultSet(this, FStmt.getResultSet());
    }

    public int getResultSetConcurrency()
        throws SQLException
    {
        active();
        return FStmt.getResultSetConcurrency();
    }

   public int getResultSetHoldability()
                        throws SQLException
{
   active();
   return FStmt.getResultSetHoldability();
}

   public int getResultSetType()
    throws SQLException
{
    active();
    return FStmt.getResultSetType();
}

   public short getShort(int Aint)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getShort(Aint);
}

   public short getShort(String parameterName)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getShort(parameterName);
}

   public String getString(int Aint)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getString(Aint);
}

   public String getString(String parameterName)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getString(parameterName);
}

   public Time getTime(int Aint)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTime(Aint);
}

   public Time getTime(int Aint, Calendar ACalendar)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTime(Aint, ACalendar);
}

   public Time getTime(String parameterName)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTime(parameterName);
}

   public Time getTime(String parameterName, Calendar cal)
    throws SQLException
{
    active();
    return ((CallableStatement) FStmt).getTime(parameterName, cal);
}

   public Timestamp getTimestamp(int Aint)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTimestamp(Aint);
}

   public Timestamp getTimestamp(int Aint, Calendar ACalendar)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTimestamp(Aint, ACalendar);
}

   public Timestamp getTimestamp(String parameterName)
    throws SQLException
{
    active();
    return ((CallableStatement)FStmt).getTimestamp(parameterName);
}

   public Timestamp getTimestamp(String parameterName, Calendar cal)
    throws SQLException
{
    active();
    return ((CallableStatement) FStmt).getTimestamp(parameterName, cal);
}

   public int getUpdateCount()
    throws SQLException
{
    active();
    return FStmt.getUpdateCount();
}

    public URL getURL(int parameterIndex)
           throws SQLException
    {
        active();
        return ((CallableStatement) FStmt).getURL(parameterIndex);
    }

    public URL getURL(String parameterName)
        throws SQLException
    {
        active();
        return ((CallableStatement) FStmt).getURL(parameterName);
    }

    public SQLWarning getWarnings()
        throws SQLException
    {
        active();
        return FStmt.getWarnings();
    }

    public boolean isClosed()
    {
        return FStmt == null;
    }

    public boolean isPoolable() throws SQLException {
		// TODO 自动生成方法存根
		return false;
	}

    public boolean isTimeout()
    {
        return System.currentTimeMillis() - FLastActionTime > FidleTimeout * (long)1000;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO 自动生成方法存根
		return false;
	}

    public void registerOutParameter(int Aint1, int Aint2)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).registerOutParameter(Aint1, Aint2);
    }

    public void registerOutParameter(int Aint1, int Aint2, int Aint3)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).registerOutParameter(Aint1, Aint2, Aint3);
    }

    public void registerOutParameter(int Aint1, int Aint2, String AStr)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).registerOutParameter(Aint1, Aint2, AStr);
    }

    public void registerOutParameter(String parameterName,
	                                   int sqlType)
	                            throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).registerOutParameter(parameterName, sqlType);
	   }

    public void registerOutParameter(String parameterName,
	                                 int sqlType,
	                                 int scale)
	                          throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).registerOutParameter(parameterName, sqlType, scale);
	   }

    public void registerOutParameter(String parameterName,
                                 int sqlType,
                                 String typeName)
                          throws SQLException
   {
        active();
        ((CallableStatement)FStmt).registerOutParameter(parameterName, sqlType, typeName);
   }

    public void setArray(int Aint, Array AArr)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setArray(Aint, AArr);
    }

    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setAsciiStream(int Aint1, InputStream AInput, int Aint2)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setAsciiStream(Aint1, AInput, Aint2);
    }

    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setAsciiStream(String parameterName, InputStream x) throws SQLException {
		// TODO 自动生成方法存根
		
	}



    public void setAsciiStream(String parameterName,
                           InputStream x,
                           int length)
                    throws SQLException
   {
        active();
        ((CallableStatement)FStmt).setAsciiStream(parameterName, x, length);
   }

    public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBigDecimal(int Aint, BigDecimal ABigDecimal)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setBigDecimal(Aint, ABigDecimal);
    }

    public void setBigDecimal(String parameterName,
	                          BigDecimal x)
	                   throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setBigDecimal(parameterName, x);
	   }

    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBinaryStream(int Aint1, InputStream Ainput, int Aint2)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setBinaryStream(Aint1, Ainput, Aint2);
    }

    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBinaryStream(String parameterName, InputStream x) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBinaryStream(String parameterName,
                            InputStream x,
                            int length)
                     throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setBinaryStream(parameterName, x, length);
    }

    public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBlob(int Aint, Blob ABlob)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setBlob(Aint, ABlob);
    }

    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBlob(String parameterName, Blob x) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBlob(String parameterName, InputStream inputStream) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}


    public void setBoolean(int Aint, boolean ABool)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setBoolean(Aint, ABool);
    }



    public void setBoolean(String parameterName,
	                       boolean x)
	                throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setBoolean(parameterName, x);
	   }


    public void setByte(int Aint, byte AByte)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setByte(Aint, AByte);
    }

    public void setByte(String parameterName,
	                       byte x)
	                throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setByte(parameterName, x);
	   }

    public void setBytes(int Aint, byte AArrByte[])
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setBytes(Aint, AArrByte);
    }

    public void setBytes(String parameterName,
	                     byte[] x)
	              throws SQLException
	   {
	        active();
	        ((CallableStatement)FStmt).setBytes(parameterName, x);
	   }

    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setCharacterStream(int Aint1, Reader AReader, int Aint2)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setCharacterStream(Aint1, AReader, Aint2);
    }

    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setCharacterStream(String parameterName, Reader reader, int length)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setCharacterStream(parameterName, reader, length);
     }

    public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setClob(int Aint, Clob AClob)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setClob(Aint, AClob);
    }

    public void setClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}



    public void setClob(String parameterName, Clob x) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setClob(String parameterName, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setClob(String parameterName, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

    public void setCursorName(String sName)
        throws SQLException
    {
        active();
        FStmt.setCursorName(sName);
    }

    public void setDate(int Aint, java.sql.Date ADate)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setDate(Aint, ADate);
    }

    public void setDate(int Aint, java.sql.Date ADate, Calendar ACalendar)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setDate(Aint, ADate, ACalendar);
    }

    public void setDate(String parameterName,
	                    java.sql.Date x)
	             throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setDate(parameterName, x);
	   }

    public void setDate(String parameterName, java.sql.Date x, Calendar cal)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setDate(parameterName, x, cal);
    }

    public void setDouble(int Aint, double ADouble)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setDouble(Aint, ADouble);
    }

    public void setDouble(String parameterName,
	                      double x)
	               throws SQLException
	   {
	        active();
	        ((CallableStatement)FStmt).setDouble(parameterName, x);
	   }

    public void setEscapeProcessing(boolean ABool)
        throws SQLException
    {
        active();
        FStmt.setEscapeProcessing(ABool);
    }

    public void setFetchDirection(int Aint)
        throws SQLException
    {
        active();
        FStmt.setFetchDirection(Aint);
    }

    public void setFetchSize(int ASize)
        throws SQLException
    {
        active();
        FStmt.setFetchSize(ASize);
    }

    public void setFloat(int Aint, float Afloat)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setFloat(Aint, Afloat);
    }

    public void setFloat(String parameterName,
	                     float x)
	              throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setFloat(parameterName, x);
	   }

   public void setInt(int Aint1, int Aint2)
    throws SQLException
{
    active();
    ((PreparedStatement)FStmt).setInt(Aint1, Aint2);
}

   public void setInt(String parameterName,
                      int x)
               throws SQLException
   {
        active();
        ((CallableStatement)FStmt).setInt(parameterName, x);
   }
    public void setLong(int Aint, long Along)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setLong(Aint, Along);
    }

    public void setLong(String parameterName,
	                    long x)
	             throws SQLException
	   {
	        active();
	        ((CallableStatement)FStmt).setLong(parameterName, x);
	   }

	public void setMaxFieldSize(int Aint)
        throws SQLException
    {
        active();
        FStmt.setMaxFieldSize(Aint);
    }

	public void setMaxRows(int Aint)
        throws SQLException
    {
        active();
        FStmt.setMaxRows(Aint);
    }

	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNCharacterStream(String parameterName, Reader value) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNClob(String parameterName, Reader reader) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNString(int parameterIndex, String value) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNString(String parameterName, String value) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setNull(int Aint1, int Aint2)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setNull(Aint1, Aint2);
    }

	public void setNull(int Aint1, int Aint2, String AStr)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setNull(Aint1, Aint2, AStr);
    }

	public void setNull(String parameterName,
	                    int sqlType)
	             throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setNull(parameterName, sqlType);
	   }

	public void setNull(String parameterName, int sqlType, String typeName)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setNull(parameterName, sqlType, typeName);
    }


	public void setObject(int Aint, Object AObject)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setObject(Aint, AObject);
    }

	public void setObject(int Aint1, Object AObject, int Aint2)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setObject(Aint1, AObject, Aint2);
    }

	public void setObject(int Aint1, Object AObject, int Aint2, int Aint3)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setObject(Aint1, AObject, Aint2, Aint3);
    }



	public void setObject(String parameterName,
                      Object x)
               throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setObject(parameterName, x);
    }

	public void setObject(String parameterName,
                      Object x,
                      int targetSqlType)
               throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setObject(parameterName, x, targetSqlType);
    }

	public void setObject(String parameterName,
                      Object x,
                      int targetSqlType,
                      int scale)
               throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setObject(parameterName, x, targetSqlType, scale);
    }

	public void setPoolable(boolean poolable) throws SQLException {
		// TODO 自动生成方法存根
		
	}

	public void setQueryTimeout(int Aint)
        throws SQLException
    {
        active();
        FStmt.setQueryTimeout(Aint);
    }

	public void setRef(int Aint, Ref ARef)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setRef(Aint, ARef);
    }

/*
	public void setShort(int Aint, short Ashort)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setShort(Aint, Ashort);
    }
*/

	public void setShort(String parameterName,
	                        short x)
	                 throws SQLException
	   {
	        active();
	        ((CallableStatement)FStmt).setShort(parameterName, x);
	   }

	public void setString(int Aint, String AStr)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setString(Aint, AStr);
    }

	public void setString(String parameterName,
	                      String x)
	               throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setString(parameterName, x);
	   }

	public void setTime(int Aint, Time ATime)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setTime(Aint, ATime);
    }

	public void setTime(int Aint, Time ATime, Calendar ACalendar)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setTime(Aint, ATime, ACalendar);
    }

	public void setTime(String parameterName,
	                    Time x)
	             throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setTime(parameterName, x);
	   }

	public void setTime(String parameterName, Time x, Calendar cal)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setTime(parameterName, x, cal);
    }

	public void setTimestamp(int Aint, Timestamp Astamp)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setTimestamp(Aint, Astamp);
    }

	public void setTimestamp(int Aint, Timestamp Astamp, Calendar ACalendar)
        throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setTimestamp(Aint, Astamp, ACalendar);
    }

	public void setTimestamp(String parameterName,
	                         Timestamp x)
	                  throws SQLException
	   {
	        active();
	        ((CallableStatement)FStmt).setTimestamp(parameterName, x);
	   }

	public void setTimestamp(String parameterName, Timestamp x, Calendar cal)
        throws SQLException
    {
        active();
        ((CallableStatement)FStmt).setTimestamp(parameterName, x, cal);
    }

	public void setUnicodeStream(int Aint1, InputStream Ainput, int Aint2)
        throws SQLException
    {
        active();
    }

	public void setURL(int parameterIndex,
                   URL x)
            throws SQLException
    {
        active();
        ((PreparedStatement)FStmt).setURL(parameterIndex, x);
    }

	public void setURL(String parameterName,
	                   URL val)
	            throws SQLException
	   {
	         active();
	        ((CallableStatement)FStmt).setURL(parameterName, val);
	   }

	public String toString()
    {
        return String.valueOf(String.valueOf((new StringBuffer("[")).append(FConn.getPosition()).append("-").append(FiPos).append("] closed=").append(isClosed()).append(", createdTime=").append((new Date(FCreateTime)).toString()).append(", lastActionTime=").append((new Date(FLastActionTime)).toString()).append(", referedObjectName=").append(FreferedObjectName).append(", referedObjectClass=").append(FreferedObjectClass)));
    }

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO 自动生成方法存根
		return null;
	}

	public boolean wasNull()
        throws SQLException
    {
        active();
        return ((CallableStatement)FStmt).wasNull();
    }
	public Object getObject(int Aint, Map<String, Class<?>> AMap) throws SQLException {
        active();
        return ((CallableStatement)FStmt).getObject(Aint, AMap);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setSQLXML(int parameterIndex, SQLXML xmlObject)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public NClob getNClob(int parameterIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob getNClob(String parameterName) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public RowId getRowId(int parameterIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public RowId getRowId(String parameterName) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML getSQLXML(int parameterIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML getSQLXML(String parameterName) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public void setNClob(String parameterName, NClob value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setRowId(String parameterName, RowId x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setSQLXML(String parameterName, SQLXML xmlObject)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}

}
